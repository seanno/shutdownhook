package com.shutdownhook.tmp;

import java.io.ByteArrayOutputStream;
import java.util.Base64;
import java.util.zip.Inflater;

import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

import com.nimbusds.jose.JWEObject;
import com.nimbusds.jose.JWSObject;
import com.nimbusds.jose.crypto.DirectDecrypter;
import com.nimbusds.jose.crypto.ECDSAVerifier;
import com.nimbusds.jose.jwk.Curve;
import com.nimbusds.jose.jwk.ECKey;
import com.nimbusds.jose.util.Base64URL;

public class App 
{
    public static void main(String[] args) throws Exception
    {
		JsonParser parser = new JsonParser();
		
		// decrypt the JWE
		SecretKey key = new SecretKeySpec(Base64.getUrlDecoder().decode(KEY_B64U), "AES");
		JWEObject jweObject = JWEObject.parse(JWE);
		jweObject.decrypt(new DirectDecrypter(key));

		// pull out the JWS and parse it
		JsonObject jsonSHIC = parser.parse(jweObject.getPayload().toString()).getAsJsonObject();
		String jws = jsonSHIC.get("verifiableCredential").getAsJsonArray().get(0).getAsString();
		JWSObject jwsObject = JWSObject.parse(jws);

		// validate it
		ECKey ecKey = new ECKey.Builder(Curve.P_256,
										new Base64URL(VERIFIER_X),
										new Base64URL(VERIFIER_Y)).build();
		
		if (!jwsObject.verify(new ECDSAVerifier(ecKey))) {
			System.out.println("Card is not valid\n");
			return;
		}

		System.out.println("Card is valid\n");

		// extract the payload
		JsonObject jsonPayload = parser.parse(inflate(jwsObject.getPayload().toBytes())).getAsJsonObject();
		System.out.println(jsonPayload.toString());
    }

	private static String inflate(byte[] input) throws Exception {

		byte[] rgb = new byte[256];
		ByteArrayOutputStream outputStream = new ByteArrayOutputStream();

		Inflater inflater = new Inflater(true); // true == no header in deflated bytes
		inflater.setInput(input);
		
		while (!inflater.finished()) {
			int cb = inflater.inflate(rgb);
			outputStream.write(rgb, 0, cb);
		}
		
		return(new String(outputStream.toByteArray(), "UTF-8"));
	}
	
	private static String b64u(String input) throws Exception {
		return(new String(Base64.getUrlDecoder().decode(input), "UTF-8"));
	}

	private final static String VERIFIER_X = "ErXNsEbxjR6BuyThvW6AT-Y233kJxZDmaw7IhBIUaGw";
	private final static String VERIFIER_Y = "YQb-pnA8Ptie6NRZR_YXy63UxpOM_AlNIsh3RGrPxrM";
	
	private final static String KEY_B64U = "AaA9R8HRAbA1K_Hr2dLjsz-JwAFPqnnU6aAfNPfUtjU=";
	
	private final static String JWE = "eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0..71bhkqe6MHUr1x0Z.kDRvVk3pOJVzTnuY0-doHuG315IbeGumO_l4vuMjJivXAidcXlaUBiZJEI0lMWdIsUwK3MFA3cj_g8agXC_7qcovmV-FaZXPWTCwGX7efQ2-jCGvY8zRqHtGnPUo40Rj_K_DmBLV2iTMQDVabiuH7G4b2yBptj8ZWZBWyeHiXuNPyVm7bSjR_WO1Pio7s6foWmQm6LVy2Qy_DyDTf2nmb8nyiCglFD5-ELkEtlCcntWQIOSyv749FQY0hosvGCPHkGbmNCFiD7W0xrF3B0mOTOZwQkoNWKAOxnkoyYimnEL6STjYF_Q3DNNYmnEzPPxBxAAkKwXN9cEHnqT1YcpK6cPLDIGd6egOW9PBnLHbTLv-UtfHhQfXYR4NYxABHsiTOJoO8xnBqfJWcwK93oai6ATgDiSQSD-LWcSfqRN8JEOk-UJSXwu1yprXUeqh1QqbTVSNHZxaZrAS8plvVI_og97yGGDmNUNXXK0j_n-b_Ev8RsANknxji6eSqAq3W1_qZuHcF7483hA44fqiVEF_z9rmPiJeZ0mD390wDSM_FfyzbxF_m_fuUBr0EetthuOGSbb3FwPdMdS7n0qeum8cokWqMmwls5Rs1FnPqNKfMGIizZJdMTktHm09b13NRbIxlSqBASvD72U0zlcEs6_N3v4kzAutDgh6haL2o7snsbWpL2Bg4da1F3oXs1RxaoVl-3UCd3ZRNBMT97GxTuw_dvK_VyYID-WiBGBgYKKs5aH6dzSNs24cQkeDcn419eJqCTh7NIufeGpCuX4GbeZBmLvAnbkLh5c3Hu8yI9ZY5-uUrWckJkYEkfcfMSg9lHwAq2nsDxEULRlh42zQ07ftB5IRlJxPSc67s0XpOUXfYrYrFIanSEGSaHg3mHXY1pPGlZlUhxipF43gubinjwsPsjko3lAVUW7J6TswTzZWptOSp8QSirWudVu7CL_zu9AirL43ZwrS3vStjDvg4tUldjO4XmZ0i2C1vn8iK0YyeTyyhlq-khbK9fnibvSs6P00SL7KzlajXWxvkPFopfh3p-GsPsJqEvyO6HcuxFjwwQSPRSMUGBNzMBrFi2SYKBX2KsuziLdQx34MUpyTomAxpEUE875Q7uhtQjQN30tb5338z5qddUXztxDUDj8LaBeTlXNL51Un3uceU0MTHqZN-g8GBuubT0TW2Rs-keDRl-WlQ_yiJp5i-br25nqJhhyPwvTX9ReTfWUP61ys6JcEr0p1bzKiIbuikFNsuV1iT0RRGrBMw2WArkP2EkFE7xYRoHj_We0_F0cVPkXI_JGPB9oBr5FKqiJ4AdxH0OFBTi3IsM7aZ0n2WvoTAQQA14dEsyZQIXqnO7vZraM5OE5Av_b5eBAtD0hbkrMuqSOc6UZxnch66hrs9wTRi3OZU7x1mlL5PvNsJo1pqkq7cdPHIobmT-xYTE7YNqj5IiA3hKLGyzCBspNtF942AM-sBjTNRZyVWGeEJ52-HNTSeBfUWTtMaD2U7brIQS2ziVOYMs4WrIlst828nhr0Dozz5NvY4MsVeY-FnM4KSynxCvjKMAAlMUiLpSfFAmroHdUX2SSW0mIDHbdu2ZYjVfiPngRHFWAuNaFiNTmow3CoRwRMOjhnTZrp23hEvh8dCYvM2Lju0JY8UcV6guDuMN6EW9LYUMlfq_cIlJRjFYRDFrsvjwKrKHAgxXmr03bzUVia0jxSLSJ3omeFFgagZKZ2uCRrv2r4yNsGBzk1H8F-3-9cVqbyPxao5jxb0Jxza_iRcR4ZV-_sYTIe0XrSzcf_XmVggofxPUcEhyhPF5kt9pq_PBv1EB3ZfDrn-InYvkbj-yQpQjDADJ7xomp255njuS1l_G3Wdv1qxdW1iKwWkrFGLAQHwnX6nMKgyw3zKA545EWAfYDTzD1PETKKbQv7JZuA_GgCfUX1jeJHTOVjNWUXJRFhU3rjwNHmWjoDClRJLnoBc6ew-WY2VocM0kJTaY9G2Www4FZR-CCAzf6mSthyOdGD2wTVwpsrQ4Tu5w-Y845Q0RA28VUWX6Po_th947vIHNSnUqRsre3qc7smUN8XDaWLRiALqckaIA49jJPidnZZZ_PJM75zEtZB5eB5depx-qScPUOoisCRBS7GM4vp_pD7eBOm6UzfwFmHbzCcCQ67ue22aVDI3D6tH3JXRn4kMOqsM2pQmBZtWCGuyxP6cvJKii9lONd517Knf0CackRJtNY4qJSkKfrvQUeF3WBKwU8532vfrSQa9nMBg5WDFcDm0LftlyFFYgzwW8ouQEkYZTrwukKsEDGGJApGTRbttKLTE2Piv29f_jwNPxTWOs7-zVb55IoUEzz68oEz905zQ-uBQGqpT6haEejEWARXlPhU2Q5b2oq8WeFeMEkO-uGk6x419udLqwuDvjjwlyEqF9chazST_jVKDiDGWtq8_BkUute6pMocPm_27B3aFfOoOBX-Lox5FqaaXXcdWRvwEOmecOIyVEEewB2ATKO1mbDGbRicJuj16VJxI6kAzDZaYiO8gwn1AfGL51GIi-0zztvv_vfMAzn1v6tu3iKuLCPHreCnPUEyuU0NfcNgTVTjANUoHH-lGmfYrA8Nok1hoMWY0HbCg0sUrjjUI9zeQuCJy1iZujsvEUHHC3Du1pqTntX_WnqQbOPQB2WtbMEk2krUPe6ENuYJ6WNGIah0tGvTPeGUdgtcFQvI3SuKp1UqX_fj_S_Z0yYJBy-4hGcchLrXyJjMJdzJF_8fcsbvw7uiR-YDETqkfDXQulimWgDszjA0BS3-ZiXc0c1va6aJ8fdkqoQ_dxMYvn8uy8gkko08YXwONDX3imonzMB4L4tUtJW4sZg4uUj09HIH_G976Jr2933s8JjU4jDtp8hsOqHd4IX6W3HnK39tTzsc8vE5rQnS6gLs0usEiKB5dZOB9D6E6_zupSrHiAEBtKZHZy1M3klBmK3aTceZmzwTMkE84UI7VECSYOkUxCi5NEGRkfVxA0LkFOONVW5WIAQbzBadzTl2sdonDpbV3CmUe-Y-jE5eShlv7rxKwDeyPfxtwvzVfg3AvzSRxY-9c_rgOR8f3VpoHCyxUVHqE5FLGJwIE-YEfcEzQ7dTezA1-L6_N9co_OhXFqmvgMjfjFpciW_P5So4olbUCEfMMKvzvy-rg5zJi1uZnmSVd3mm7cShNcv7HbeY3TXY1n22al5Jv1ocg8t7GtJpVKuI51UtDQov6YTvnJRfoy6Yvm70eDrM1QvoOXE58rbxyvQD1bMpfoCRj8oztkQJUVfCrGTN_SnWwGtr6Tew0h8fGGjQfkNa_jU3-ZOv1nCdaULkxtMd1bo9lcQ0fCauLE8TplZyQGeaftlwcRd_S_4PyuweOW6FPnrEpeHkSChNHPzTni11U5a6jKXjHSulHJmF6oaPBwA6PumWmG8_U2HO3TTrieLPNqePkczrk1DkvCM89AckJhia0Bke4qMFxh9Q1V0dAEnRGh-QlvcZ3_awPIb3mYG9CX7azU0Z5xjjqp4NFOjOYAaRQrz-H8-N3ipaVq7dwteA_l0Blwlr2IPlYfBkkVmzxojsTiqo620-nYj7DhE99I2TzhwRnL7nP75rjmQMF07mBS5ZdjCHnsnft7CVZA4XormkVbk_jhBS-bKMnj9nvvslGrnl_x30DIQnhmxXHiIErda3uwYhiSdpE56iJnAakYMHdKeHmC48KbkBYZHPDLvYb18Dakh9Tjd0KSeEaLXAF5UPDaqT7U_KA7GtoLwuM5bZHn-XbQ2wdwacHUFik69z1ojzV8gcia0FfwDDJPG8AyZmb4-o6-3ClmgMPmPOgolU_Sxr-TcaJxC_YYFBbSuYKpt6IWNc5IPwqBuA4wMt9tRfqVOE6OtvJzFlYkkz8Xd_E7QxTKGd6mYAoGMee8v6h3h89XcBpShNb5UoPwNyG0tpJHJMiOS26aQMPTjFUaEZO1240POhl2X9enAWV-fEc--cW94yPcawHpO1x6lSuWUA9B_gRs3BN3GquS6JE5eaKw3V3kcNSYJBYU5_KqWBdjnBkWnDPkKItg3Q4UqwjwAyyciwHHpQ9QX9QhnxlO3FzbsClSttodGlxhmPVCyKXBU6L-XIaKVg6JnHpVAKf-05LC55zb1vWOtHK08agl6T9IQd1z7kvCwojp2_5cvBzW1tEJcy3qYNLv64VlAjD95783xZYlyNMY2lGUKE56wHTf-He5ZCmJaZ-CGjxCtfYjFKMpo6n377-wHbXCPcn9GvV6zPKWHtrhw2I_yIKNvNy0dabQt7HZh3Ck3fDos5iP7sOkqD3ttiOwNGZRx7IsSxBzvUB8FgOy5FRWiLMhXVv6m9OvfNbKyFKJ1nJOpFybdRd3LZp8JazipZZjHVvpwHNh3z19etCRo8xcBGYdVO5ojED6F1OUSz600fQ8Q3g45jugFmM6EKtGkP29q10MmZBqYD28KmdNxmbTVCoZKFfCl-fb5akgZCvPqsdLENtZHOOUk1-U6n1vj5RWpiN8_vuQhDxe4rPeCRmiwtg0Zel3wlfAh1Zr2r5-q6WoLjSQWyIC9IRfTSz7h4WS3uGfgFukHgQYCh4zBfjQqdYhSge3dBSoAjhYA6vWT_OfcRWNoZd5-WO6Hg9yPQf9llEPED1dClJ6C4cZu_ZI25N-IdTOaG4CLQDiKv-kYxK6o17BWnXKAci88ZAFVLOlWVNedol0PVVr7i4Dozwj-w4p9nZ1U4kDeXwrULGbwAsIcWQkmjn-m-ka8n-q_2EKlAQYSxfCjAtGu7izSt6K_6ryMRj58KyzFGW5sZfTRsrN0C-nbvrDXP61NrlvdhFi19KI1CfsrFSyZZ0YVeA7dWKL97Ft7L4qwyt5fwmgvty4yETxOR94HlQZkXSFkpcYCPn4mQTmLi4zK63nHYaxLxRM89Zz95cHM1MEN2gWJzKyYztqXQfCkOWUuRPkP4Jh_RVpJI1WVz-5Ix1d7QbWwcaRS7y0HIZf4RDKMGPI0tXqvDV2LBEqnJJsZDFR3FteO8e3Z1b1LdeWN7SLXqeuF7-cXVup7MaKTyE_VwQHbuzRyszUMxVpsy2H8KCqnI6041Y6t3vG7tyJuOsgrjg95yq1sMLcmhkZGVKxqiN7NCsYskT8e5eJlevKvGQ-Nq6tsNw7qS6x-mcw6SC-KBo-DgVCXATlsWiaiAHHqkXRJEv5cgnPeV4_GnT-5ktAVP0KG9OLcz5Q70q2O1edyLXkGId_h6oYjzzqfxU-AOAFwbD4q8Gxpb0kHXj6Syt9XefgppszH3jYaNZUVdMlwrtqX0_Idi0Zuzq-LgJoFKAKZWXKuicEPhXyY9EyrUG7AbOdadF44r5oinBPmSklsfmn0s3whCRNs_f5wU51lwd1jC8m5VJZKvuSeq4pcr3HX4Q-wt2SeJN_KQ9yRz1O8uRqn_9QGVdWO4Kdtmww-evgQap0RLrvJdSnZtp3q4fE9nsOTOC_SHP99mxyIh76H2D6Ltlur0ogeR_r7qAPGbm7XXqEOppno9KlvllEw1c5p8FelsR7iyq5vqBNABvQbbyGjS_o4YAYMHMvZTgFOnNVYTtpjoAgC-WTUK1JbtxPFt99qcd-SypaJNHklTttxJ65MtEzIdNO5Sq5e0uyDmmTbPXMQRXzf4gZ8E-elMsvloLaj-MSehp8YrmZ-wAiuYOT7UbmigH2bcAL6vN66ShFy6QvI3-gMheqOf6pr2Te06sE0RmUc9POPMrW-qNibx_K0W9V6mKbrPJwI2W_GstBBdrASUZtY6Mca9fa3zhtdrgw2mepsnh3DjwyupLuAcG3WkjzmeN_vkjTAc6SO_rQjTKdlI2EYO4LdJS4Uk4fnzIFgsfkPi637Tbp37r-uQ09FqI7WjD1VVYAdYMeSyFMTXzTBhzswVo5WsUI9iqYb0AmHCBZd65jtmOE2QNJsO0wkft8Kd7mV5DL0jT4plBgMhFcjLhwzdkCNheBchI0zuG2cIUtzbHdLqZ7zQ5u9JUrrtNegUgM2m6_XEXF5fjPLYmV6sRRLbnUQqP7Mb4Amh8FjwRZyaEpFAQnpbSznuEDGClKNaQd3pVIicZ6oOopKz5fI6FiEmOKOLXfOzgyZNoDHotETcg4leCxozX8vBkXT8z_2PM1wnsZNr0wA-Kiq3ew4W867PlfXDUTJblqoyE8ALWOeYf24Y_KT4u8KMRUgqpCQMU7Yer6gv2LgZ2QkKMa4zWUO-rzjJCD4qcXVbB_gmA8TEN2JC0V047bmBlv8ha8KjlJnlDyvN2cE_Y7diZgFDem9gzhXYJDQ3cy_QAqvnLi013JMpw-k21I40ltLRCdpKW_opuVmHQIi44DSh3Py0WHtSu2RZLDmrTyIvgo5rUloflewWL-WfXsJWRJ-hpPtO0OwrYL1ZPQho82KEEH8zVkS1PZ1iNDRqv9WllAr74xxGlSKHm5grLtziQ22NcvMWcj4EmAAg_2olT2s4BBmaPpdik3baFyrpraxnrTszQpm458B_rP5y4MdxNKKEGUhaJsZ_RTdWQ8Cs-MZSD9oQC10VcNBYvAWdQB4Kng2Dt6Rs9FcTgOetXAhdhgXEDYzMsPROKiExUavbmUf-2p_Kj1tkXEHCvVLdfHrSQg7Plkn5croEecFZqAZcfxqSOrRurb6lIzpaJtLMrlUTIDqzFK8erJtn2jnYb-UeFFP2m3Uo6yS-M8FbBF1JIoELsazb_em48RBPtPPD1_Wat0ZYquzuaxTJdUv0mLWOo0RSc4kPvyqo8jyixETkakWrw90xw88fP4fxGiOSGtQCmPkWgEhdllSL3_RrmI3oIbI_OgWBMghQxTqBcaE2se--NDVXN1Ho1sgjzV0je2sH-vJaZltOAaiDCvQ2hOaTR_PRgmDOMMtPLVbDB9zfCQqsdhLdhUg2EabSwLf6A6BgcrqOveW_ZZ45XkPXqV24B3H4J9IkEMAc3oXeeuzVd4XUyOisrNwcHY9axFJcZNW0Io7u8zNGltnoDu1XrMmu2ExNNlOci71YkZBJylpLsMXSrQrSOu_VPkgZGh28ygLH_9af3Pm7atZWUocY5iMeFMArcV-njaEZgP7uYKcdQw8nUR7ngafbVNU0hkvD_2NbHA0i5Pa9quAkWRdCE443rWmWeNWSPwBGyaicWnVIf4FDCfsTdYeY80LwDvtZpdct4FwLmEAWNrgMq9ro3Gv32jkYT4__T2kuSqbrcHfVc2V0FgV8IGmbPOiEjHRYd1i8y83cioBeJl-1Z16NdxMV-VcHvbzfQz0kLEA.RT6OuYn7k6kBr_mRpKonLw";
	
}
